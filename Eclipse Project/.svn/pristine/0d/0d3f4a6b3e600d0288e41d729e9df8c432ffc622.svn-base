/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-10-18
 */
package TurbojetEngineMod.engine;

import experiment.toolkit.Calibration;
import experiment.toolkit.ValueSet;

/**
 * The Class BypassFan.
 */
public class BypassFan extends EngineBase {

  /** The fluid model. */
  private final String KeTJET_Str_FluidModel;

  /** The gamma. */
  private double gamma;

  /** Input: Cp. */
  private double Cp;

  /** Input: Tt2. */
  private double Tt2;

  /** Input: Pt2. */
  private double Pt2;

  /** Input: pi_fan. */
  private double pi_fan;

  /** Input: alpha. */
  private double alpha;

  /** Input: mdot_zero. */
  private double mdot_zero;

  /** Output: tao_fan. */
  private double tao_fan;

  /** Output: mdot_fan. */
  private double mdot_fan;

  /** Output: w_fan. */
  private double w_fan;

  /** Output: Wdot_fan. */
  private double Wdot_fan;

  /** Output: Pt8. */
  private double Pt8;

  /** Output: Tt8. */
  private double Tt8;

  /**
   * Instantiates a new bypass fan.
   *
   * @param name the name
   */
  public BypassFan(final String name) {
    super(name);
    KeTJET_Str_FluidModel = "undefined";
  }

  /* (non-Javadoc)
   * @see TurbojetEngineMod.engine.EngineBase#manifestModel()
   */
  @Override
  public boolean manifestModel() {
    return true;
  }

  /* (non-Javadoc)
   * @see TurbojetEngineMod.engine.EngineBase#process(experiment.toolkit.ValueSet, experiment.toolkit.Calibration)
   */
  public void process(final ValueSet valueSet, final Calibration calibration) {
    calibration.update(this);
    switch (KeTJET_Str_FluidModel) {
    case "Isentropic/Static (subsonic)":
      IsentropicStaticSubsonic(valueSet);
      break;
    case "Isentropic/Static (supersonic)":
      IsentropicStaticSupersonic(valueSet);
      break;
    case "Polytropic/Static (supersonic)":
      PolytropicStaticSupersonic(valueSet);
      break;
    default:
      log.out("Undefined fluid model '" + KeTJET_Str_FluidModel + "'");
      break;
    }
  }

  /**
   * Isentropic static subsonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSubsonic(final ValueSet valueSet) {
  }

  /**
   * Isentropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    // Temp. Ratio @ station 8
    tao_fan = Math.pow(pi_fan,((gamma-1)/gamma));

    // mass flow thru Fan
    mdot_fan = (alpha/(1+alpha))*mdot_zero;  //[lbm/s]

    // Specific Work, Fan
    w_fan = Cp*(Tt2*(tao_fan-1));

    // Fan Work
    // Wdot_fan = mdot_fan*w_fan;  //[Btu/s]

    // Fan Work (in hp)
    Wdot_fan = mdot_fan*w_fan*3600*(1/2545.7); //[hp]

    // Stagnation Pressure @ stage 8
    Pt8 = Pt2*pi_fan;

    // Stagnation Temp. @ stage 8
    Tt8 = Tt2*tao_fan;

    if (valueSet.isFirstPass()) {
      valueSet.addValue(name, "tao_fan",  tao_fan,  "", "Temp. Ratio @ station 8", "");
      valueSet.addValue(name, "mdot_fan", mdot_fan, "[lbm/s]", "mass flow thru Fan", "");
      valueSet.addValue(name, "w_fan",    w_fan,    "", "Specific Work, Fan", "");
      valueSet.addValue(name, "Wdot_fan", Wdot_fan, "[hp]", "Fan Work (in hp)", "");
      valueSet.addValue(name, "Pt8",      Pt8,      "", "Stagnation Pressure @ stage 8", "");
      valueSet.addValue(name, "Tt8",      Tt8,      "", "Stagnation Temp. @ stage 8", "");
    }
    valueSet.valuePush(this);
  }

  /**
   * Polytropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void PolytropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    // Temp. Ratio @ station 8
    tao_fan = Math.pow(pi_fan,((gamma-1)/gamma));

    //  mass flow thru Fan
    mdot_fan = (alpha/(1+alpha))*mdot_zero;  //[lbm/s]

    //  Specific Work, Fan
    w_fan = Cp*(Tt2*(tao_fan-1));

    // Fan Work
    //Wdot_fan = mdot_fan*w_fan;  //[Btu/s]

    // Fan Work (in hp)
    Wdot_fan = mdot_fan*w_fan*3600*(1/2545.7);  //[hp]

    // Stagnation Pressure @ stage 8
    Pt8 = Pt2*pi_fan;

    // Stagnation Temp. @ stage 8
    Tt8 = Tt2*tao_fan;

    if (valueSet.isFirstPass()) {
      valueSet.addValue(name, "tao_fan",  tao_fan,  "", "Temp. Ratio @ station 8", "");
      valueSet.addValue(name, "mdot_fan", mdot_fan, "[lbm/s]", "mass flow thru Fan", "");
      valueSet.addValue(name, "w_fan",    w_fan,    "", "Specific Work, Fan", "");
      valueSet.addValue(name, "Wdot_fan", Wdot_fan, "[hp]", "Fan Work (in hp)", "");
      valueSet.addValue(name, "Pt8",      Pt8,      "", "Stagnation Pressure @ stage 8", "");
      valueSet.addValue(name, "Tt8",      Tt8,      "", "Stagnation Temp. @ stage 8", "");
    }
    //valueSet.dump();
    valueSet.valuePush(this);
  }
}
