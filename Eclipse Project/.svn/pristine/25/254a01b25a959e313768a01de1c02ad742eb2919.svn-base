/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-09-18
 */
package turbojet.toolkit;

import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * The Class Settings.
 */
public class TypeMapping {

  /** The type map. */
  private HashMap<String, Set<String>> typeMap = new HashMap<String, Set<String>>();

  /** The Constant defaultPathname. */
  private static final String defaultPathname = ".";

  /** The Constant defaultFilename. */
  private static final String defaultFilename = "TypeMapping.json";

  /** The pathname. */
  private String pathname;

  /** The filename. */
  private String filename;

  /**
   * Instantiates a new type mapping.
   */
  public TypeMapping() {
    pathname = defaultPathname;
    filename = defaultFilename;
  }

  /**
   * Parses the file.
   */
  public void parseFile() {
    JSONParser parser = new JSONParser();
    final Path filePath = Paths.get(pathname, filename);
    try (FileReader fileReader = new FileReader(filePath.toFile())) {
      final Object obj = parser.parse(fileReader);
      final JSONObject jsonObject = (JSONObject) obj;
      parseType(jsonObject, "boolean");
      parseType(jsonObject, "char");
      parseType(jsonObject, "byte");
      parseType(jsonObject, "short");
      parseType(jsonObject, "int");
      parseType(jsonObject, "long");
      parseType(jsonObject, "float");
      parseType(jsonObject, "double");
      parseType(jsonObject, "String");
    } catch (IOException | ParseException e) {
      e.printStackTrace();
    }
  }

  /**
   * Parses the type.
   *
   * @param jsonObject the json object
   * @param typeLabel the type label
   */
  public void parseType(final JSONObject jsonObject, final String typeLabel) {
    Set<String> aliasSet = new HashSet<String>();
    typeMap.put(typeLabel, aliasSet);
    final JSONArray arrayBoolean = (JSONArray) jsonObject.get(typeLabel);
    if (arrayBoolean != null) {
      for (int i = 0; i < arrayBoolean.size(); i++) {
        aliasSet.add((String) arrayBoolean.get(i));
      }
    }
  }

  /**
   * Gets the pathname.
   *
   * @return the pathname
   */
  public String getPathname() {
    return pathname;
  }

  /**
   * Gets the filename.
   *
   * @return the filename
   */
  public String getFilename() {
    return filename;
  }

  /**
   * Sets the pathname.
   *
   * @param pathname the new pathname
   */
  public void setPathname(String pathname) {
    this.pathname = pathname;
  }

  /**
   * Sets the filename.
   *
   * @param filename the new filename
   */
  public void setFilename(String filename) {
    this.filename = filename;
  }

/**
   * Gets the map.
   *
   * @return the map
   */
  public HashMap<String, Set<String>> getMap() {
    return typeMap;
  }

  /**
   * Debug.
   */
  public void debug() {
    for (Entry<String, Set<String>> typeEntry : typeMap.entrySet()) {
      System.out.println("Type: " + typeEntry.getKey());
      for (String typeAlias : typeEntry.getValue()) {
        System.out.println("  Alias: " + typeAlias);
      }
    }
  }
}
