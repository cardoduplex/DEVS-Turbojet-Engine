/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-10-17
 */
package experiment.design.util;

import java.io.FileReader;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import experiment.toolkit.Settings;
import experiment.toolkit.SettingsSingleton;

/**
 * The Class DesignExperimentLoad.
 */
public class DesignExperimentLoad {

  /** The settings. */
  private final Settings settings = SettingsSingleton.getInstance();

  private static final String experimentDesign = "<design>";

  public static final String factorModel = "<model>";

  /** The Constant defaultFilename. */
  private static final String defaultFilename = "DesignExperiment.json";

  /** The pathname. */
  private String pathname;

  /** The filename. */
  private String filename;

  /**
   * Instantiates a new design experiment load.
   */
  public DesignExperimentLoad() {
    pathname = settings.lookupString("DesignExperimentPath", settings.getPathnameConfig());
    filename = settings.lookupString("DesignExperimentFile", defaultFilename);
  }

  /**
   * Load.
   *
   * @param designExperiment the design experiment
   */
  public void load(final DesignExperiment designExperiment) {
    final JSONParser parser = new JSONParser();
    final Path filePath = Paths.get(pathname, filename);
    try (FileReader fileReader = new FileReader(filePath.toFile())) {
      final Object obj = parser.parse(fileReader);
      final JSONObject jsonObject = (JSONObject) obj;
      for (final Object jsonKey : jsonObject.keySet()) {
        final String keyName = (String)jsonKey;
        System.out.println("-- "+keyName);
        final Object keyObject = jsonObject.get(keyName);
        if (keyName.equalsIgnoreCase(experimentDesign))
          loadDesign(designExperiment, keyObject);
        else
          loadFactor(designExperiment, keyName, keyObject);
      }
    } catch (Exception e) {
      throw new RuntimeException("DesignExperiment file " + filePath + ": " + e.getMessage());
    }
  }

  private void loadFactor(final DesignExperiment designExperiment, final String factorDescription, final Object keyObject) throws Exception {
    if (keyObject instanceof JSONArray) {
      final JSONArray factoryArray = (JSONArray)keyObject;
      final DesignExperimentFactor experimentFactor = new DesignExperimentFactor();
      designExperiment.factorList.add(experimentFactor);
      experimentFactor.description = factorDescription;
      for (int i = 0; i < factoryArray.size(); i++) {
        if (factoryArray.size() == 2) {
          final Object factorObject = factoryArray.get(i);
          if (i == 0) {
            if (!(factorObject instanceof String))
              throw new Exception("Factor array index 0 must be a string: " + factorDescription);
            experimentFactor.name = (String)factorObject;
          } else {
            if (!(factorObject instanceof JSONObject))
              throw new Exception("Factor array index " + i + " must be a Nested-object: " + factorDescription);
            final JSONObject levelObject = (JSONObject)factorObject;
            for (final Object levelKey : levelObject.keySet()) {
              final String levelName = (String)levelKey;
              final Object levelValue = levelObject.get(levelKey);
              if (!(levelValue instanceof String))
                throw new Exception("Factor level must be a string: " + factorDescription);
              System.out.println("    "+experimentFactor.name+" : "+levelName+" : "+(String)levelValue);
              experimentFactor.levels.put(levelName, (String)levelValue);
            }
          }
        } else
          throw new Exception("Factor array must have 2 entries: " + factorDescription);
      }
    } else if (keyObject instanceof JSONObject)
      throw new Exception("Nested-object unsupported: " + factorDescription);
    else
      throw new Exception("Element unsupported: " + factorDescription);
  }

  private void loadDesign(final DesignExperiment designExperiment, final Object designObject) throws Exception {
    if (designObject instanceof JSONArray) {
      final JSONArray designArray = (JSONArray)designObject;
      for (int i = 0; i < designArray.size(); i++) {
        final JSONObject designArrayObject = (JSONObject) designArray.get(i);
        for (final Object keyKey : designArrayObject.keySet()) {
          final String designName = (String)keyKey;
          System.out.println("    "+designName);
//          final Object groupValue = designArrayObject.get(keyKey);
//          if (groupValue instanceof JSONArray) {
//            final JSONArray valueArray = (JSONArray)groupValue;
//            for (int j = 0; j < valueArray.size(); j++) {
//              final JSONObject valueObject = (JSONObject) valueArray.get(j);
//              for (final Object valueKey : valueObject.keySet()) {
//                final String valueName = (String)valueKey;
//                final Object keyValue = valueObject.get(valueKey);
//                if (keyValue instanceof JSONArray) {
//                  final JSONArray jsonArray = (JSONArray)keyValue;
//                  if (jsonArray.size() == 4) {
//                    final Object value0 = jsonArray.get(0);
//                    final Object value1 = jsonArray.get(1);
//                    final Object value2 = jsonArray.get(2);
//                    final Object value3 = jsonArray.get(3);
//                    if (!(value0 instanceof String))
//                      throw new Exception("Array index 0 must be a value-type string: " + valueName);
//                    if (!(value1 instanceof String))
//                      throw new Exception("Array index 1 must be a string of the selected value-type: " + valueName);
//                    if (!(value2 instanceof String))
//                      throw new Exception("Array index 2 must be a string: " + valueName);
//                    if (!(value3 instanceof String))
//                      throw new Exception("Array index 3 must be a string: " + valueName);
//                    valueSet.addValue(designName, valueName, (String)value0, (String)value1, (String)value2, (String)value3);
//                  } else
//                    throw new Exception("Array must have 4 entries: " + valueName);
//                } else if (keyValue instanceof JSONObject)
//                  throw new Exception("Nested-object unsupported: " + valueName);
//                else
//                  throw new Exception("Element unsupported: " + valueName);
//              }
//            }
//          } else if (groupValue instanceof JSONObject)
//            throw new Exception("Nested-object unsupported: " + designName);
//          else
//            throw new Exception("Element unsupported: " + designName);
          }
      }
    } else if (designObject instanceof JSONObject)
      throw new Exception("Nested-object unsupported design");
    else
      throw new Exception("Element unsupported design");
  }

  /**
   * Gets the pathname.
   *
   * @return the pathname
   */
  public String getPathname() {
    return pathname;
  }

  /**
   * Gets the filename.
   *
   * @return the filename
   */
  public String getFilename() {
    return filename;
  }
}
