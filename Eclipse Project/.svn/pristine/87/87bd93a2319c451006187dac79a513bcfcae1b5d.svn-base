/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-10-18
 */
package TurbojetEngineMod.engine;

import experiment.toolkit.Calibration;
import experiment.toolkit.ValueSet;

/**
 * The Class BypassFanNozzle.
 */
public class BypassFanNozzle extends EngineBase {

  /** The fluid model. */
  private final String KeTJET_Str_FluidModel;

  /** Input: Tzero. */
  private double Tzero;

  /** Input: Pzero. */
  private double Pzero;

  /** Input: Mzero. */
  private double Mzero;

  /** Input: gamma. */
  private double gamma;

  /** Input: gc. */
  private double gc;

  /** Input: azero. */
  private double azero;

  /** Input: tao_r. */
  private double tao_r;

  /** Input: tao_fan. */
  private double tao_fan;

  /** Input: mdot_fan. */
  private double mdot_fan;

  /** Input: Pt8. */
  private double Pt8;

  /** Input: Tt8. */
  private double Tt8;

  /** Output: Pt9. */
  private double Pt9;

  /** Output: Tt9. */
  private double Tt9;

  /** Output: P9. */
  private double P9;

  /** Output: T9. */
  private double T9;

  /** Output: pi_fnz. */
  private double pi_fnz;

  /** Output: tao_fnz. */
  private double tao_fnz;

  /** Output: M_9_squared. */
  private double M_9_squared;

  /** Output: M_9. */
  private double M_9;

  /** Output: U_9_over_a_zero_squared. */
  private double U_9_over_a_zero_squared;

  /** Output: Fs_fan. */
  private double Fs_fan;

  /** Output: F_9. */
  private double F_9;

  /**
   * Instantiates a new bypass fan nozzle.
   *
   * @param name the name
   */
  public BypassFanNozzle(final String name) {
    super(name);
    KeTJET_Str_FluidModel = "undefined";
  }

  /* (non-Javadoc)
   * @see TurbojetEngineMod.engine.EngineBase#manifestModel()
   */
  @Override
  public boolean manifestModel() {
    return true;
  }

  /* (non-Javadoc)
   * @see TurbojetEngineMod.engine.EngineBase#process(experiment.toolkit.ValueSet, experiment.toolkit.Calibration)
   */
  public void process(final ValueSet valueSet, final Calibration calibration) {
    calibration.update(this);
    switch (KeTJET_Str_FluidModel) {
    case "Isentropic/Static (subsonic)":
      IsentropicStaticSubsonic(valueSet);
      break;
    case "Isentropic/Static (supersonic)":
      IsentropicStaticSupersonic(valueSet);
      break;
    case "Polytropic/Static (supersonic)":
      PolytropicStaticSupersonic(valueSet);
      break;
    default:
      log.out("Undefined fluid model '" + KeTJET_Str_FluidModel + "'");
      break;
    }
  }

  /**
   * Isentropic static subsonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSubsonic(final ValueSet valueSet) {
  }

  /**
   * Isentropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    // Total Press. @ station 9 - No losses
    Pt9 = Pt8;

    // Total Temp. @ station 9 - No losses
    Tt9 = Tt8;

    // Pressure @ Fan Nozzle Exit (to Ambient)
    P9 = Pzero;  //[lbf/ft^2]

    // Temperature @ Fan Nozzle Exit (to Ambient)
    T9 = Tzero;  //[degR]

    // Pressure Ratio @ station 9
    pi_fnz = Pt9/Pt8;

    // Temp. Ratio @ station 9
    tao_fnz = Tt9/Tt8;

    // Mach number at station 9 (M_9^2)
    M_9_squared = (2/(gamma-1))*((tao_r*tao_fan) - 1);

    M_9 = Math.sqrt(M_9_squared);

    // Velocity at station 9 wrt ambient speed of sound (U9/a0)^2
    // (Exactly the same as (M_9)^2, refer to proof)
    U_9_over_a_zero_squared = (2/(gamma-1))*((tao_r*tao_fan) - 1);

    // Fan (specific) Thrust [lbf/(lbm/s)]
    Fs_fan = (azero/gc)*((Math.sqrt( U_9_over_a_zero_squared))-Mzero);

    // Fan Thrust [lbf]
    F_9 = Fs_fan*mdot_fan;

    if (valueSet.isFirstPass()) {
      valueSet.addValue(name, "Pt9",         Pt9,         "", "Total Press. @ station 9 - No losses");
      valueSet.addValue(name, "Tt9",         Tt9,         "", "Total Temp. @ station 9 - No losses");
      valueSet.addValue(name, "P9",          P9,          "", "Pressure @ Fan Nozzle Exit (to Ambient)");
      valueSet.addValue(name, "T9",          T9,          "", "Temperature @ Fan Nozzle Exit (to Ambient)");
      valueSet.addValue(name, "pi_fnz",      pi_fnz,      "", "Pressure Ratio @ station 9");
      valueSet.addValue(name, "tao_fnz",     tao_fnz,     "", "Temp. Ratio @ station 9");
      valueSet.addValue(name, "M_9_squared", M_9_squared, "", "Mach number at station 9 (M_9^2)");
      valueSet.addValue(name, "M_9",         M_9,         "", "");
      valueSet.addValue(name, "U_9_over_a_zero_squared", U_9_over_a_zero_squared, "", "Velocity at station 9 wrt ambient speed of sound (U9/a0)^2");
      valueSet.addValue(name, "Fs_fan",      Fs_fan,      "[lbf/(lbm/s)]", "Fan (specific) Thrust");
      valueSet.addValue(name, "F_9",         F_9,         "[lbf]", "Fan Thrust");
    }
    valueSet.dump();
    valueSet.valuePush(this);
  }

  /**
   * Polytropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void PolytropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    if (valueSet.isFirstPass()) {
    }
    valueSet.valuePush(this);
  }
}
