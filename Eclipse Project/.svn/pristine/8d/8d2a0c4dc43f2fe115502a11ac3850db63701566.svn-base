/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-09-18
 */
package turbojet.toolkit;

import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * The Class Settings.
 */
public class TypeMapping {

  /** The type map. */
  private HashMap<String, Set<String>> typeMap = new HashMap<String, Set<String>>();

  /** The Constant defaultPathname. */
  private static final String defaultPathname = ".";

  /** The Constant defaultFilename. */
  private static final String defaultFilename = "TypeMapping.json";

  /** The pathname. */
  private String pathname;

  /** The filename. */
  private String filename;

  public TypeMapping() {
    pathname = defaultPathname;
    filename = defaultFilename;
  }

  public void parseFile() {
    JSONParser parser = new JSONParser();
    final Path filePath = Paths.get(pathname, filename);
    System.out.println(">>> "+filePath);
    try (FileReader fileReader = new FileReader(filePath.toFile())) {
      Object obj = parser.parse(fileReader);
      JSONObject jsonObject = (JSONObject) obj;

      JSONArray arrayBoolean = (JSONArray) jsonObject.get("boolean");
      Iterator<String> iterator = arrayBoolean.iterator();
      while (iterator.hasNext()) {
        System.out.println(iterator.next());
      }
    } catch (IOException | ParseException e) {
      e.printStackTrace();
    }

  }

  public String getPathname() {
    return pathname;
  }

  public String getFilename() {
    return filename;
  }

  public void setPathname(String pathname) {
    this.pathname = pathname;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

/**
   * Gets the map.
   *
   * @return the map
   */
  public HashMap<String, Set<String>> getMap() {
    return typeMap;
  }

  /**
   * Debug.
   */
  public void debug() {
    for (Entry<String, Set<String>> entry : typeMap.entrySet()) {
      System.out.println("Setting: " + entry.getKey());
      // entry.getValue());
    }
  }
}
