/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-09-24
 */
package EngineMod;

import java.text.DecimalFormat;

import GenCol.entity;
import model.modeling.message;
import turbojet.toolkit.Log;
import turbojet.toolkit.ValueSet;
import turbojet.toolkit.ValueSetCache;
import turbojet.toolkit.ValueSetCacheSingleton;
import view.modeling.ViewableAtomic;

/**
 * The Class EngineBase.
 */
public class EngineBase extends ViewableAtomic {

  /** The init counter. */
  private int initCounter;

  /** The value set cache. */
  private final ValueSetCache valueSetCache = ValueSetCacheSingleton.getInstance();

  /** The log. */
  protected Log log;

  /** The job. */
  protected entity job;

  /** The clock. */
  protected double clock;

  /**
   * Instantiates a new engine base.
   */
  public EngineBase() {
    this("EngineBase");
  }

  /**
   * Instantiates a new engine base.
   *
   * @param name the name
   */
  public EngineBase(final String name) {
    super(name);
    log = new Log(name);
    initCounter = 0;

    addInport("xIn");
    addOutport("xOut");
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#initialize()
   */
  @Override
  public void initialize() {
    if (initCounter++ == 0) {
      super.initialize();
      job = null;
      clock = 0;
      passivate();
    }
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltext(double, model.modeling.message)
   */
  @Override
  public void deltext(double e, message x) {
    clock = clock + e;
    Continue(e);
    if (phaseIs("passive"))
      for (int i = 0; i < x.getLength(); i++)
        if (messageOnPort(x, "xIn", i)) {
          job = x.getValOnPort("xIn", i);
          final String inJobName = job.getName();
          job = null;
          holdIn("active", 0);
          if (valueSetCache.test(inJobName)) {
            final ValueSet valueSet = valueSetCache.pop(inJobName);
            processValueSet(valueSet);
            valueSetCache.push(valueSet);
            job = new entity(valueSet.getKey());
          } else
            log.err("ValueSet not found in cache: " + inJobName);
        }
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltint()
   */
  @Override
  public void deltint() {
    clock = clock + sigma;
    passivate();
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#out()
   */
  @Override
  public message out() {
    message m = new message();
    if (phaseIs("active"))
      m.add(makeContent("xOut", job));
    return m;
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#showState()
   */
  @Override
  public void showState() {
    super.showState();

    final DecimalFormat deltaFormat = new DecimalFormat("#0.00");
    String state = "phase=" + phase + "; sigma=" + deltaFormat.format(sigma) +
        "; clock=" + deltaFormat.format(clock);
    if (job != null)
        state += "; VSet = " + job.getName();
    log.out(state);
  }

  /* (non-Javadoc)
   * @see view.modeling.ViewableAtomic#getTooltipText()
   */
  @Override
  public String getTooltipText() {
    final DecimalFormat deltaFormat = new DecimalFormat("#0.00");
    String tooltip = super.getTooltipText() + "\nclock: " + deltaFormat.format(clock);
    if (job != null)
      tooltip += "\nVSet: " + job.getName();
    return tooltip;
  }

  /**
   * Process value set.
   *
   * @param valueSet the value set
   */
  protected void processValueSet(final ValueSet valueSet) {
    //log.out("Process value set " + valueSet.getKey());
  }
}
