/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-09-24
 */
package experiment.model;

import java.text.DecimalFormat;

import GenCol.entity;
import model.modeling.message;
import experiment.toolkit.ExperimentLog;
import experiment.toolkit.ValueSet;
import experiment.toolkit.ValueSetCache;
import experiment.toolkit.ValueSetCacheSingleton;
import experiment.toolkit.ValueSetInterface;
import view.modeling.ViewableAtomic;

/**
 * The Class EngineBase.
 */
public abstract class ExperimentModelBase extends ViewableAtomic implements ValueSetInterface {

  /** The value set cache. */
  private final ValueSetCache valueSetCache = ValueSetCacheSingleton.getInstance();

  /** The version. */
  private char version;

  /** The log. */
  protected ExperimentLog log;

  /** The clock. */
  protected double clock;

  /** The current value set. */
  protected ValueSet currentValueSet;

  /**
   * Instantiates a new engine base.
   */
  public ExperimentModelBase() {
    this("EngineBase", 'A');
  }

  /**
   * Instantiates a new engine base.
   *
   * @param name the name
   * @param version the version
   */
  public ExperimentModelBase(final String name, final char version) {
    super(String.valueOf(version) + ": " + name);
    this.version = version;
    log = new ExperimentLog(getName());

    addInport("xIn");
    addOutport("xOut");
    addInport("yIn");
    addOutport("yOut");
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#initialize()
   */
  @Override
  public void initialize() {
    super.initialize();
    clock = 0;
    currentValueSet = null;
    passivate();
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltext(double, model.modeling.message)
   */
  @Override
  public void deltext(double e, message x) {
    clock = clock + e;
    Continue(e);
    if (phaseIs("passive"))
      for (int i = 0; i < x.getLength(); i++)
        if (messageOnPort(x, "xIn", i)) {
          final entity job = x.getValOnPort("xIn", i);
          final String[] valueComponents = job.getName().split(":");
          if (valueComponents[2].equals(Character.toString(version))) {
            if (valueSetCache.test(job.getName())) {
              currentValueSet = valueSetCache.pop(job.getName());
              //if (clock > currentValueSet.getClock())
              //  log.err("Clock is being rolled backward from " + clock + "to " + currentValueSet.getClock());
              //clock = currentValueSet.getClock();
            } else
              log.err("ValueSet not found in cache: " + job.getName());
            holdIn("process", 1);
          }
        }
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltint()
   */
  @Override
  public void deltint() {
    clock = clock + sigma;
    if (currentValueSet != null) {
      processValueSet(currentValueSet);
      holdIn("transfer", 0);
    } else
      passivate();
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#out()
   */
  @Override
  public message out() {
    message m = new message();
    if (phaseIs("transfer") && currentValueSet != null) {
      //currentValueSet.updateClock(clock);
      valueSetCache.push(currentValueSet);
      final entity job = new entity(currentValueSet.getKey());
      m.add(makeContent("xOut", job));
      currentValueSet = null;
    }
    return m;
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#showState()
   */
  @Override
  public void showState() {
    super.showState();

    final DecimalFormat deltaFormat = new DecimalFormat("#0.00");
    String state = "phase=" + phase + "; " +
                   "sigma=" + deltaFormat.format(sigma) + "; " +
                   "clock=" + deltaFormat.format(clock);
    state += valueSetCache.getState("; ", currentValueSet);
    log.out(state);
  }

  /* (non-Javadoc)
   * @see view.modeling.ViewableAtomic#getTooltipText()
   */
  @Override
  public String getTooltipText() {
    final DecimalFormat deltaFormat = new DecimalFormat("#0.00");
    String tooltip = super.getTooltipText() + "\nclock: " + deltaFormat.format(clock);
    tooltip += valueSetCache.getTooltipText(currentValueSet);
    return tooltip;
  }
}
