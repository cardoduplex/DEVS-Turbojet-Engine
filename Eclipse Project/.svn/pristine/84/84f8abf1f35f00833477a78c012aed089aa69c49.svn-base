/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-10-03
 */
package TurbojetEngineMod.engine;

import experiment.toolkit.Calibration;
import experiment.toolkit.ValueSet;

/**
 * The Class Nozzle.
 */
public class Nozzle extends EngineBase {

  /** The fluid model. */
  private final String KeTJET_Str_FluidModel;

  /** The afterburner flag. */
  private final boolean KeTJET_Bool_Afterburner;

  /** Input: Tzero. */
  private double Tzero;

  /** Input: Pzero. */
  private double Pzero;

  /** Input: Mzero. */
  private double Mzero;

  /** Input: gamma. */
  private double gamma;

  /** Input: gc. */
  private double gc;

  /** Input: azero. */
  private double azero;

  /** Input: tao_r. */
  private double tao_r;

  /** Input: mdot_zero. */
  private double mdot_zero;

  /** Input: tao_c. */
  private double tao_c;

  /** Input: tao_lambda. */
  private double tao_lambda;

  /** Input: f. */
  private double f;

  /** Input: tao_t. */
  private double tao_t;

  /** Input: Tt5. */
  private double Tt5;

  /** Input: Pt5. */
  private double Pt5;

  /** Input: Cp. */
  private double Cp;

  /** Input: hpr. */
  private double hpr;

  /** Input: tao_lambda_ab. */
  private double tao_lambda_ab;

  /** Input: U_9_over_a_zero_squared. */
  private double U_9_over_a_zero_squared;

  /** Input: alpha. */
  private double alpha;

  /** Output: p7. */
  private double P7;

  /** Output: t7. */
  private double T7;

  /** Output: Pt7. */
  private double Pt7;

  /** Output: Tt7. */
  private double Tt7;

  /** Output: pi_n. */
  private double pi_n;

  /** Output: tao_n. */
  private double tao_n;

  /** Output: m_7. */
  private double M_7;

  /** Output: U_7_over_a_7. */
  private double U_7_over_a_7;

  /** Output: U_7_over_a_zero. */
  private double U_7_over_a_zero;

  /** Output: F_s. */
  private double F_s;

  /** Output: f_7. */
  private double F_7;

  /** Output: tsfc. */
  private double TSFC;

  /** Output: eta_t. */
  private double eta_t;

  /** Output: eta_p. */
  private double eta_p;

  /** Output: eta_o. */
  private double eta_o;

  /** Output: f_ab. */
  private double f_ab;

  /** Output: Tt7_over_Tt_5. */
  private double Tt7_over_Tt5;

  /** Output: U_7_ab_over_a_zero_squared. */
  private double U_7_ab_over_a_zero_squared;

  /** Output: U_7_ab. */
  private double U_7_ab;

  /** Output: U_zero. */
  private double U_zero;

  /** Output: U_9. */
  private double U_9;

  /** Output: F_s_ab. */
  private double F_s_ab;

  /** Output: F_7_ab. */
  private double F_7_ab;

  /** Output: TSF_C_ab. */
  private double TSFC_ab;

  /** Output: eta_t_ab. */
  private double eta_t_ab;

  /** Output: eta_p_ab. */
  private double eta_p_ab;

  /** Output: eta_o_ab. */
  private double eta_o_ab;

  /**
   * Instantiates a new nozzle.
   *
   * @param name the name
   */
  public Nozzle(final String name) {
    super(name);
    KeTJET_Str_FluidModel = "undefined";
    KeTJET_Bool_Afterburner = false;
  }

  /* (non-Javadoc)
   * @see TurbojetEngineMod.engine.EngineBase#process(experiment.toolkit.ValueSet, experiment.toolkit.Calibration)
   */
  public void process(final ValueSet valueSet, final Calibration calibration) {
    calibration.update(this);
    switch (KeTJET_Str_FluidModel) {
    case "Isentropic/Static (subsonic)":
      IsentropicStaticSubsonic(valueSet);
      break;
    case "Isentropic/Static (supersonic)":
      IsentropicStaticSupersonic(valueSet);
      break;
    case "Polytropic/Static (supersonic)":
      PolytropicStaticSupersonic(valueSet);
      break;
    default:
      log.out("Undefined fluid model '" + KeTJET_Str_FluidModel + "'");
      break;
    }
  }

  /**
   * Isentropic static subsonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSubsonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    // Expanded to Ambient Pressure and Temperature
    P7 = Pzero;  //[lbf/ft^2]
    T7 = (tao_lambda/(tao_r*tao_c))*Tzero; //[degR]

    // No loss in Static Pressure or Static Temperature (Isentropic)
    Pt7 = Pt5;  //[lbf/ft^2]
    Tt7 = Tt5;  //[degR]

    // Pressure ratio at Nozzle
    pi_n = Pt7/Pt5;

    // Temp. ratio at Nozzle
    tao_n = Tt7/Tt5;

    // Mach number at Nozzle Exit
    M_7 = Math.sqrt((2/(gamma-1))*((tao_r*tao_c*tao_t)-1));

    // Velocity ratio at Nozzle exit
    U_7_over_a_7 = M_7;

    // Velocity ratio over Ambient speed of sound
    U_7_over_a_zero = Math.sqrt((2/(gamma-1))*(tao_lambda/(tao_r*tao_c))*((tao_r*tao_c*tao_t)-1));

    // Specific Thrust
    F_s = (azero/gc)*(U_7_over_a_zero-Mzero);  //[lbf/(lbm/s)]

    // Thrust
    F_7 = F_s*mdot_zero;  //[lbf]

    // Thrust Specific Fuel Consumption (TSFC)
    TSFC = (f/F_s)*3600;  //[(lbm/hr)/lbf] or [1/hr]

    // Thermal Efficiency of Turbojet Engine
    eta_t = 1-(1/(tao_r*tao_c));

    // Performance Efficiency of Turbojet Engine
    eta_p = (2*Mzero)/(U_7_over_a_zero+Mzero);

    // Overall Turbojet Engine Efficiency
    eta_o = eta_t*eta_p;

    if (valueSet.isFirstPass()) {
      valueSet.addValue(name, "P7",              P7,              "[lbf/ft^2]", "");
      valueSet.addValue(name, "T7",              T7,              "[degR]", "");
      valueSet.addValue(name, "Pt7",             Pt7,             "[lbf/ft^2]", "");
      valueSet.addValue(name, "Tt7",             Tt7,             "[degR]", "");
      valueSet.addValue(name, "pi_n",            pi_n,            "", "Pressure ratio at Nozzle");
      valueSet.addValue(name, "tao_n",           tao_n,           "", "Temp. ratio at Nozzle");
      valueSet.addValue(name, "M_7",             M_7,             "", "Mach number at Nozzle Exit");
      valueSet.addValue(name, "U_7_over_a_7",    U_7_over_a_7,    "", "Velocity ratio at Nozzle exit");
      valueSet.addValue(name, "U_7_over_a_zero", U_7_over_a_zero, "", "Velocity ratio over Ambient speed of sound");
      valueSet.addValue(name, "F_s",             F_s,             "[lbf/(lbm/s)]", "Specific Thrust");
      valueSet.addValue(name, "F_7",             F_7,             "[lbf]", "Thrust");
      valueSet.addValue(name, "TSFC",            TSFC,            "[(lbm/hr)/lbf] or [1/hr]", "Thrust Specific Fuel Consumption (TSFC)");
      valueSet.addValue(name, "eta_t",           eta_t,           "", "Thermal Efficiency of Turbojet Engine");
      valueSet.addValue(name, "eta_p",           eta_p,           "", "Performance Efficiency of Turbojet Engine");
      valueSet.addValue(name, "eta_o",           eta_o,           "", "Overall Turbojet Engine Efficiency");
    }
    valueSet.valuePush(this);
  }

  /**
   * Isentropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    // Expanded to Ambient Pressure and Temperature
    P7 = Pzero;  //[lbf/ft^2]
    T7 = (tao_lambda/(tao_r*tao_c))*Tzero; //[degR]

    // No loss in Static Pressure or Static Temperature (Isentropic)
    Pt7 = Pt5;
    Tt7 = Tt5;

    // Pressure ratio at Nozzle
    pi_n = Pt7/Pt5;

    // Temp. ratio at Nozzle
    tao_n = Tt7/Tt5;

    // Mach number at Nozzle Exit
    M_7 = Math.sqrt((2/(gamma-1))*((tao_r*tao_c*tao_t)-1));

    // Velocity ratio at Nozzle exit
    U_7_over_a_7 = M_7;

    // Velocity ratio over Ambient speed of sound
    U_7_over_a_zero = Math.sqrt((2/(gamma-1))*(tao_lambda/(tao_r*tao_c))*((tao_r*tao_c*tao_t)-1));

    if (KeTJET_Bool_Afterburner) {
      // fuel flow (ratio)
      f = ((Cp*Tzero)/hpr)*(tao_lambda-(tao_c*tao_r));

      // Specific Thrust
      F_s = (azero/gc)*(U_7_over_a_zero-Mzero);

      // Thrust [lbf]
      F_7 = F_s*mdot_zero;

      // Thrust Specific Fuel Consumption (TSFC)
      TSFC = (f/F_s)*3600;

      // Thermal Efficiency of Turbojet Engine
      eta_t = 1-(1/(tao_r*tao_c));

      // Performance Efficiency of Turbojet Engine
      eta_p = (2*Mzero)/(U_7_over_a_zero+Mzero);

      // Overall Turbojet Engine Efficiency
      eta_o = eta_t*eta_p;
    } else {
      // fuel flow (ratio)
      f_ab = ((Cp*Tzero)/hpr)*(tao_lambda_ab-tao_r);

      // Temperature ratio Nozzle to Afterburner
      Tt7_over_Tt5 = (tao_lambda_ab/(tao_t*tao_lambda));

      // ((U7_ab)/a0)^2
      U_7_ab_over_a_zero_squared = (Tt7_over_Tt5 * Math.pow(U_7_over_a_zero, 2));

      // U7_ab  Exhaust Velocity at Nozzle with AB ON
      U_7_ab = (Math.sqrt(U_7_ab_over_a_zero_squared))*azero;

      // U_0  Velocity at inlet (speed of aircraft)
      U_zero = azero*Mzero;

      // U_9 Velocity at Fan Nozzle Exhaust
      U_9 = (Math.sqrt(U_9_over_a_zero_squared))*azero;

      // Specific Thrust
      F_s_ab = ((azero/gc)*(1/(1+alpha)))*(Math.sqrt(U_7_ab_over_a_zero_squared)-Mzero+ (alpha*(Math.sqrt(U_9_over_a_zero_squared)-Mzero)));

      // Thrust [lbf]
      F_7_ab = F_s_ab*mdot_zero;

      // Thrust Specific Fuel Consumption (TSFC)
      TSFC_ab = (f_ab/F_s_ab)*3600;

      // Thermal Efficiency of Turbojet Engine
      eta_t_ab = (gamma-1)*Cp*Tzero*((U_7_ab_over_a_zero_squared - Math.pow(Mzero, 2))/(2*f_ab*hpr));

      // Performance Efficiency of Turbojet Engine
      eta_p_ab = 2*(((U_7_ab/U_zero)-1+(alpha*((U_9/U_zero)-1)))/(  ((Math.pow(U_7_ab, 2))/(Math.pow(U_zero, 2)) )-1+(alpha*(((Math.pow(U_9, 2)/Math.pow(U_zero,2))-1)))));

      // Overall Turbojet Engine Efficiency
      eta_o_ab = eta_t_ab*eta_p_ab;
    }

    if (valueSet.isFirstPass()) {
      valueSet.addValue(name, "P7",              P7,              "[lbf/ft^2]", "");
      valueSet.addValue(name, "T7",              T7,              "[degR]", "");
      valueSet.addValue(name, "Pt7",             Pt7,             "[lbf/ft^2]", "");
      valueSet.addValue(name, "Tt7",             Tt7,             "[degR]", "");
      valueSet.addValue(name, "pi_n",            pi_n,            "", "Pressure ratio at Nozzle");
      valueSet.addValue(name, "tao_n",           tao_n,           "", "Temp. ratio at Nozzle");
      valueSet.addValue(name, "M_7",             M_7,             "", "Mach number at Nozzle Exit");
      valueSet.addValue(name, "U_7_over_a_7",    U_7_over_a_7,    "", "Velocity ratio at Nozzle exit");
      valueSet.addValue(name, "U_7_over_a_zero", U_7_over_a_zero, "", "Velocity ratio over Ambient speed of sound");
      if (KeTJET_Bool_Afterburner) {
        valueSet.addValue(name, "f",               f,               "", "fuel flow (ratio)");
        valueSet.addValue(name, "F_s",             F_s,             "[lbf/(lbm/s)]", "Specific Thrust");
        valueSet.addValue(name, "F_7",             F_7,             "[lbf]", "Thrust");
        valueSet.addValue(name, "TSFC",            TSFC,            "[(lbm/hr)/lbf] or [1/hr]", "Thrust Specific Fuel Consumption (TSFC)");
        valueSet.addValue(name, "eta_t",           eta_t,           "", "Thermal Efficiency of Turbojet Engine");
        valueSet.addValue(name, "eta_p",           eta_p,           "", "Performance Efficiency of Turbojet Engine");
        valueSet.addValue(name, "eta_o",           eta_o,           "", "Overall Turbojet Engine Efficiency");
      } else {
        valueSet.addValue(name, "f_ab",            f_ab,            "", "fuel flow (ratio)");
        valueSet.addValue(name, "Tt7_over_Tt5",    Tt7_over_Tt5,    "", "Temperature ratio Nozzle to Afterburner");
        valueSet.addValue(name, "U_7_ab_over_a_zero_squared", U_7_ab_over_a_zero_squared, "", "((U7_ab)/a0)^2");
        valueSet.addValue(name, "U_7_ab",          U_7_ab,          "", "Exhaust Velocity at Nozzle with AB ON");
        valueSet.addValue(name, "U_zero",          U_zero,          "", "Velocity at inlet (speed of aircraft)");
        valueSet.addValue(name, "U_9",             U_9,             "", "Velocity at Fan Nozzle Exhaust");
        valueSet.addValue(name, "F_s_ab",          F_s_ab,          "[lbf/(lbm/s)]", "Specific Thrust");
        valueSet.addValue(name, "F_7_ab",          F_7_ab,          "[lbf]", "Thrust");
        valueSet.addValue(name, "TSFC_ab",         TSFC_ab,         "[(lbm/hr)/lbf] or [1/hr]", "Thrust Specific Fuel Consumption (TSFC)");
        valueSet.addValue(name, "eta_t_ab",        eta_t_ab,        "", "Thermal Efficiency of Turbojet Engine");
        valueSet.addValue(name, "eta_p_ab",        eta_p_ab,        "", "Performance Efficiency of Turbojet Engine");
        valueSet.addValue(name, "eta_o_ab",        eta_o_ab,        "", "Overall Turbojet Engine Efficiency");
      }
    }
    valueSet.valuePush(this);
  }

  /**
   * Polytropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void PolytropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    if (valueSet.isFirstPass()) {
    }
    valueSet.valuePush(this);
  }
}
