/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-10-02
 */
package TurbojetEngineMod.engine;

import experiment.toolkit.Calibration;
import experiment.toolkit.ValueSet;

/**
 * The Class Diffuser.
 */
public class Diffuser extends EngineBase {

  /** The fluid model. */
  private final String KeTJET_Str_FluidModel;

  /** Input: Tzero. */
  private double Tzero;

  /** Input: Pzero. */
  private double Pzero;

  /** Input: Mzero. */
  private double Mzero;

  /** Input: gamma. */
  private double gamma;

  /** Output: Tt 2. */
  private double Tt2;

  /** Output: Pt 2. */
  private double Pt2;

  /** Output: tao r. */
  private double tao_r;

  /** Output: pi r. */
  private double pi_r;

  /**
   * Instantiates a new diffuser.
   *
   * @param name the name
   */
  public Diffuser(final String name) {
    super(name);
    KeTJET_Str_FluidModel = "undefined";
  }

  /* (non-Javadoc)
   * @see TurbojetEngineMod.engine.EngineBase#process(experiment.toolkit.ValueSet, experiment.toolkit.Calibration)
   */
  public void process(final ValueSet valueSet, final Calibration calibration) {
    calibration.update(this);
    switch (KeTJET_Str_FluidModel) {
    case "Isentropic/Static (subsonic)":
      IsentropicStaticSubsonic(valueSet);
      break;
    case "Isentropic/Static (supersonic)":
      IsentropicStaticSupersonic(valueSet);
      break;
    case "Polytropic/Static (supersonic)":
      PolytropicStaticSupersonic(valueSet);
      break;
    default:
      log.out("Undefined fluid model '" + KeTJET_Str_FluidModel + "'");
      break;
    }
  }

  /**
   * Isentropic static subsonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSubsonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    // Stagnation Temp. @ station 2
    Tt2 = Tzero*((1+((gamma-1)/2)*(Mzero*Mzero)));

    // Stagnation Press. @ station 2
    Pt2 = Pzero*Math.pow( ((1+((gamma-1)/2)*(Mzero*Mzero))),(gamma/(gamma-1)));

    // Temp. Ratio @ station 2
    tao_r = Tt2/Tzero;

    //Press. Ratio @ station 2
    pi_r = Pt2/Pzero;

    if (valueSet.isFirstPass()) {
      valueSet.addValue(name, "Tt2",   Tt2,   "", "Stagnation Temp. @ station 2");
      valueSet.addValue(name, "Pt2",   Pt2,   "", "Stagnation Press. @ station 2");
      valueSet.addValue(name, "tao_r", tao_r, "", "Temp. Ratio @ station 2");
      valueSet.addValue(name, "pi_r",  pi_r,  "", "Press. Ratio @ station 2");
    }
    valueSet.valuePush(this);
  }

  /**
   * Isentropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    // Stagnation Temp. @ station 2
    Tt2 = Tzero*((1+((gamma-1)/2)*(Mzero*Mzero)));

    // Stagnation Press. @ station 2
    Pt2 = Pzero*Math.pow( ((1+((gamma-1)/2)*(Mzero*Mzero))),(gamma/(gamma-1)));

    // Temp. Ratio @ station 2
    tao_r = Tt2/Tzero;

    // Press. Ratio @ station 2
    pi_r = Pt2/Pzero;

    if (valueSet.isFirstPass()) {
      valueSet.addValue(name, "Tt2",   Tt2,   "", "Stagnation Temp. @ station 2");
      valueSet.addValue(name, "Pt2",   Pt2,   "", "Stagnation Press. @ station 2");
      valueSet.addValue(name, "tao_r", tao_r, "", "Temp. Ratio @ station 2");
      valueSet.addValue(name, "pi_r",  pi_r,  "", "Press. Ratio @ station 2");
    }
    valueSet.valuePush(this);
  }

  /**
   * Polytropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void PolytropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    if (valueSet.isFirstPass()) {
    }
    valueSet.valuePush(this);
  }
}
