/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-10-03
 */
package TurbojetEngineMod.engine;

import experiment.toolkit.Calibration;
import experiment.toolkit.ValueSet;

/**
 * The Class Afterburner.
 */
public class Afterburner extends EngineBase {

  /** The fluid model. */
  private final String KeTJET_Str_FluidModel;

  /** Input: Tt6. */
  private double Tt6;

  /** Input: Tzero. */
  private double Tzero;

  /** Output: tao_lambda_ab. */
  private double tao_lambda_ab;

  /**
   * Instantiates a new afterburner.
   *
   * @param name the name
   */
  public Afterburner(final String name) {
    super(name);
    KeTJET_Str_FluidModel = "undefined";
  }

  /* (non-Javadoc)
   * @see TurbojetEngineMod.engine.EngineBase#manifestModel()
   */
  @Override
  public boolean manifestModel() {
    return true;
  }

  /* (non-Javadoc)
   * @see TurbojetEngineMod.engine.EngineBase#process(experiment.toolkit.ValueSet, experiment.toolkit.Calibration)
   */
  public void process(final ValueSet valueSet, final Calibration calibration) {
    calibration.update(this);
    switch (KeTJET_Str_FluidModel) {
    case "Isentropic/Static (subsonic)":
      IsentropicStaticSubsonic(valueSet);
      break;
    case "Isentropic/Static (supersonic)":
      IsentropicStaticSupersonic(valueSet);
      break;
    case "Polytropic/Static (supersonic)":
      PolytropicStaticSupersonic(valueSet);
      break;
    default:
      log.out("Undefined fluid model '" + KeTJET_Str_FluidModel + "'");
      break;
    }
  }

  /**
   * Isentropic static subsonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSubsonic(final ValueSet valueSet) {
  }

  /**
   * Isentropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void IsentropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    // Temperature ratio at afterburner
    tao_lambda_ab = Tt6/Tzero;

    if (valueSet.isFirstPass()) {
      valueSet.addValue(name, "tao_lambda_ab", tao_lambda_ab, "", "Temperature ratio at afterburner", "");
    }
    valueSet.valuePush(this);
  }

  /**
   * Polytropic static supersonic.
   *
   * @param valueSet the value set
   */
  public void PolytropicStaticSupersonic(final ValueSet valueSet) {
    valueSet.valuePop(this);

    // Temperature ratio at afterburner
    tao_lambda_ab = Tt6/Tzero;

    if (valueSet.isFirstPass()) {
      valueSet.addValue(name, "tao_lambda_ab", tao_lambda_ab, "", "Temperature ratio at afterburner", "");
    }
    //valueSet.dump();
    valueSet.valuePush(this);
  }
}
