/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-10-03
 */
package TurbojetEngineMod.engine;

import experiment.toolkit.Calibration;
import experiment.toolkit.ValueSet;

/**
 * The Class Nozzle.
 */
public class Nozzle extends EngineBase {

  /** The fluid model. */
  private final String KeTJET_Str_FluidModel;

  /** Input: Tzero. */
  private double Tzero;

  /** Input: Pzero. */
  private double Pzero;

  /** Input: Mzero. */
  private double Mzero;

  /** Input: gamma. */
  private double gamma;

  /** Input: gc. */
  private double gc;

  /** Input: azero. */
  private double azero;

  /** Input: tao r. */
  private double tao_r;

  /** Input: mdot zero. */
  private double mdot_zero;

  /** Input: tao c. */
  private double tao_c;

  /** Input: tao lambda. */
  private double tao_lambda;

  /** Input: f. */
  private double f;

  /** Input: tao t. */
  private double tao_t;

  /** Input: Tt 5. */
  private double Tt5;

  /** Input: Pt 5. */
  private double Pt5;

  /** Output: p7. */
  private double P7;

  /** Output: t7. */
  private double T7;

  /** Output: Pt 7. */
  private double Pt7;

  /** Output: Tt 7. */
  private double Tt7;

  /** Output: pi n. */
  private double pi_n;

  /** Output: tao n. */
  private double tao_n;

  /** Output: m 7. */
  private double M_7;

  /** Output: U 7 over a 7. */
  private double U_7_over_a_7;

  /** Output: U 7 over a zero. */
  private double U_7_over_a_zero;

  /** Output: F s. */
  private double F_s;

  /** Output: f 7. */
  private double F_7;

  /** Output: tsfc. */
  private double TSFC;

  /** Output: eta t. */
  private double eta_t;

  /** Output: eta p. */
  private double eta_p;

  /** Output: eta o. */
  private double eta_o;

  /**
   * Instantiates a new nozzle.
   *
   * @param name the name
   */
  public Nozzle(final String name) {
    super(name);
    KeTJET_Str_FluidModel = "undefined";
  }

  /* (non-Javadoc)
   * @see TurbojetEngineMod.engine.EngineBase#process(experiment.toolkit.ValueSet, experiment.toolkit.Calibration)
   */
  public void process(final ValueSet valueSet, final Calibration calibration) {
    calibration.update(this);
    valueSet.valuePop(this);

    switch (KeTJET_Str_FluidModel) {
    case "Isentropic/Static (subsonic)":
      // Expanded to Ambient Pressure and Temperature
      P7 = Pzero;  //[lbf/ft^2]
      T7 = (tao_lambda/(tao_r*tao_c))*Tzero; //[degR]

      // No loss in Static Pressure or Static Temperature (Isentropic)
      Pt7 = Pt5;  //[lbf/ft^2]
      Tt7 = Tt5;  //[degR]

      // Pressure ratio at Nozzle
      pi_n = Pt7/Pt5;

      // Temp. ratio at Nozzle
      tao_n = Tt7/Tt5;

      // Mach number at Nozzle Exit
      M_7 = Math.sqrt((2/(gamma-1))*((tao_r*tao_c*tao_t)-1));

      // Velocity ratio at Nozzle exit
      U_7_over_a_7 = M_7;

      // Velocity ratio over Ambient speed of sound
      U_7_over_a_zero = Math.sqrt((2/(gamma-1))*(tao_lambda/(tao_r*tao_c))*((tao_r*tao_c*tao_t)-1));

      // Specific Thrust
      F_s = (azero/gc)*(U_7_over_a_zero-Mzero);  //[lbf/(lbm/s)]

      // Thrust
      F_7 = F_s*mdot_zero;  //[lbf]

      // Thrust Specific Fuel Consumption (TSFC)
      TSFC = (f/F_s)*3600;  //[(lbm/hr)/lbf] or [1/hr]

      // Thermal Efficiency of Turbojet Engine
      eta_t = 1-(1/(tao_r*tao_c));

      // Performance Efficiency of Turbojet Engine
      eta_p = (2*Mzero)/(U_7_over_a_zero+Mzero);

      // Overall Turbojet Engine Efficiency
      eta_o = eta_t*eta_p;

      break;
    case "Isentropic/Static (supersonic)":
      break;
    case "Polytropic/Static (supersonic)":
      break;
    default:
      log.out("Undefined fluid model '" + KeTJET_Str_FluidModel + "'");
      break;
    }

    if (valueSet.getInstance() == 0) {
      valueSet.addValue(name, "P7",              P7,              "[lbf/ft^2]", "");
      valueSet.addValue(name, "T7",              T7,              "[degR]", "");
      valueSet.addValue(name, "Pt7",             Pt7,             "[lbf/ft^2]", "");
      valueSet.addValue(name, "Tt7",             Tt7,             "[degR]", "");
      valueSet.addValue(name, "pi_n",            pi_n,            "", "Pressure ratio at Nozzle");
      valueSet.addValue(name, "tao_n",           tao_n,           "", "Temp. ratio at Nozzle");
      valueSet.addValue(name, "M_7",             M_7,             "", "Mach number at Nozzle Exit");
      valueSet.addValue(name, "U_7_over_a_7",    U_7_over_a_7,    "", "Velocity ratio at Nozzle exit");
      valueSet.addValue(name, "U_7_over_a_zero", U_7_over_a_zero, "", "Velocity ratio over Ambient speed of sound");
      valueSet.addValue(name, "F_s",             F_s,             "[lbf/(lbm/s)]", "Specific Thrust");
      valueSet.addValue(name, "F_7",             F_7,             "[lbf]", "Thrust");
      valueSet.addValue(name, "TSFC",            TSFC,            "[(lbm/hr)/lbf] or [1/hr]", "Thrust Specific Fuel Consumption (TSFC)");
      valueSet.addValue(name, "eta_t",           eta_t,           "", "Thermal Efficiency of Turbojet Engine");
      valueSet.addValue(name, "eta_p",           eta_p,           "", "Performance Efficiency of Turbojet Engine");
      valueSet.addValue(name, "eta_o",           eta_o,           "", "Overall Turbojet Engine Efficiency");
    }
    valueSet.valuePush(this);
  }
}
