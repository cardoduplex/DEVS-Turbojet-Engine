/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-08-31
 */
package EngineMod;

import GenCol.entity;
import model.modeling.message;

/**
 * The Class EngineStage3.
 */
public class EngineStage3 extends EngineBase {

  /**
   * Instantiates a new engine stage 3.
   */
  public EngineStage3() {
    this("Stage3", 10);
  }

  /**
   * Instantiates a new engine stage 3.
   *
   * @param name the name
   * @param processingTime the processing time
   */
  public EngineStage3(final String name, final double processingTime) {
    super(name, processingTime);

    addInport("in");
    addOutport("out");
    addInport("none"); // allows testing for null input
                       // which should cause only "continue"

    addTestInput("in", new entity("job1"));
    addTestInput("in", new entity("job2"), 20);
    addTestInput("none", new entity("job"));
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#initialize()
   */
  public void initialize() {
    phase = "passive";
    sigma = INFINITY;
    job   = new entity("job");
    super.initialize();
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltext(double, model.modeling.message)
   */
  public void deltext(final double e, final message x) {
    Continue(e);

    System.out.println("The elapsed time of the processor is" + e);
    System.out.println("*****************************************");
    System.out.println("external-Phase before: " + phase);

    if (phaseIs("passive")) {
      for (int i = 0; i < x.getLength(); i++)
        if (messageOnPort(x, "in", i)) {
          job = x.getValOnPort("in", i);
          holdIn("busy", 10);
          System.out.println("processing tiem of proc is" + processingTime);
        }
    }

    System.out.println("external-Phase after: " + phase);
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltint()
   */
  public void deltint() {
    System.out.println("Internal-Phase before: " + phase);
    passivate();
    job = new entity("none");
    System.out.println("Internal-Phase after: " + phase);
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltcon(double, model.modeling.message)
   */
  public void deltcon(double e, message x) {
    System.out.println("confluent");
    deltint();
    deltext(0, x);
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#out()
   */
  public message out() {
    message m = new message();

    if (phaseIs("busy")) {
      m.add(makeContent("out", job));
    }

    return m;
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#showState()
   */
  public void showState() {
    super.showState();

    // System.out.println("job: " + job.getName());
  }
}
