/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-09-16
 */
package EngineMod;

import java.awt.Dimension;
import java.awt.Point;
import java.util.Vector;

import model.modeling.IODevs;
import view.modeling.ViewableAtomic;
import view.modeling.ViewableDigraph;

/**
 * The Class TurbojetEngine.
 */
public class TurbojetEngine extends ViewableDigraph {

  /** The version. */
  private char version;

  /** The models. */
  private final Vector<ViewableAtomic> models = new Vector<ViewableAtomic>();

  /**
   * Instantiates a new turbojet engine.
   */
  public TurbojetEngine() {
    this("TurbojetEngine", 'A');
  }

  /**
   * Instantiates a new turbojet engine.
   *
   * @param name the name
   * @param version the version
   */
  public TurbojetEngine(final String name, final char version) {
    super(String.valueOf(version) + " " + name);
    this.version = version;

    defineLayout();
  }

  /**
   * Define layout.
   */
  private void defineLayout() {
    createEngineStage("Setup");
    createEngineStage("Diffuser");
    createEngineStage("Compressor");

    addInport("xIn");
    addOutport("xOut");
    baseCoupling(this, models.get(0));
    for (int i = 0; i < models.size() - 1; i++)
      baseCoupling(models.get(i), models.get(i+1));
    baseCoupling(models.get(models.size() - 1), this);
  }

  /**
   * Creates the engine stage.
   *
   * @param name the name
   */
  private void createEngineStage(final String name) {
    final ViewableAtomic model = new EngineStage1(name, version);
    models.add(model);
    add(model);
  }

  /**
   * Base coupling.
   *
   * @param prev the prev
   * @param next the next
   */
  private void baseCoupling(final IODevs prev, final IODevs next) {
    final String inPort = prev == this ? "xIn" : "xOut";
    final String outPort = next == this ? "xOut" : "xIn";
    addCoupling(prev, inPort, next, outPort);
    if (prev != this && next != this)
      addCoupling(next, "yOut", prev, "yIn");
  }

  /* (non-Javadoc)
   * @see view.modeling.ViewableDigraph#layoutForSimViewOverride()
   */
  @Override
  public boolean layoutForSimViewOverride()
  {
    int pointX = 0;
    int pointY = 20;
    for (ViewableAtomic model : models) {
      model.setPreferredLocation(new Point(pointX, pointY));
      pointX += 190;
    }
    pointX += 100;
    pointY += 60;
    preferredSize = new Dimension(pointX, pointY);
    return true;
  }
    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(670, 173);
        ((ViewableComponent)withName("B Compressor")).setPreferredLocation(new Point(197, 22));
        ((ViewableComponent)withName("B Diffuser")).setPreferredLocation(new Point(0, 87));
        ((ViewableComponent)withName("B Setup")).setPreferredLocation(new Point(0, 20));
    }
}
