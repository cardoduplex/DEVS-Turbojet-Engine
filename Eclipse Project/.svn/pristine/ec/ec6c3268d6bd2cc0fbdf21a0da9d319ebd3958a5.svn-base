/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-10-09
 */
package experiment.design;

import java.util.Queue;

import experiment.toolkit.ExperimentLog;
import experiment.toolkit.Settings;
import experiment.toolkit.SettingsSingleton;
import experiment.toolkit.ValueSet;
import experiment.toolkit.ValueSetCache;
import experiment.toolkit.ValueSetCacheSingleton;

/**
 * The Class FrontPorch.
 */
public class FrontPorch {

  /** The settings. */
  protected final Settings settings = SettingsSingleton.getInstance();

  /** The value set cache. */
  protected final ValueSetCache valueSetCache = ValueSetCacheSingleton.getInstance();

  /** The log. */
  protected ExperimentLog log;

  private final int modelCount;

  /** The test model list. */
  public TestModel[] testModelList;

  /** The total experiments. */
  private int totalExperiments;

  /**
   * Instantiates a new front porch.
   *
   * @param name the name
 * @param modelCount
   */
  public FrontPorch(final String name) {
    log = new ExperimentLog(name);
    modelCount = settings.lookupInt("ExperimentEngine_ModelCount");

    testModelList = new TestModel[modelCount];
    for (int i = 0; i < testModelList.length; i++)
      testModelList[i] = new TestModel();
  }

  public void initialize() {
    for (int i = 0; i < testModelList.length; i++)
      testModelList[i].initialize();

    loadExperiments();
  }

  private void loadExperiments() {
    System.out.println("Load experiment"); /*TODO*/
    totalExperiments = 4;/*TODO*/
  }

  public void startExperiments(final Queue<ValueSet> valueSetQueueOut) {
    // TODO start experiments that are ready
    for (int i = 0; i < testModelList.length; i++) {
      testModelList[i].incrementExperiment();
      //System.out.println("Processing int: " + testModelList[i].getExperiment() + ", clock=" + testModelList[i].getClock() + ", phase=" + phase);
      char version = (char) ('A' + i);
      final ValueSet valueSet = valueSetCache.create(testModelList[i].getExperiment(), version);
      valueSetQueueOut.add(valueSet);
    }
  }

  public boolean areExperimentsComplete() {
    int minExperiment = totalExperiments;
    for (int i = 0; i < testModelList.length; i++)
      if (testModelList[i].getExperiment() < minExperiment)
        minExperiment = testModelList[i].getExperiment();
    return minExperiment >= totalExperiments;
  }

//  private String process(final ValueSet valueSet) {
//    log.out("------- " + valueSet.getKey() + " --------");
//    if (valueSet.isInstanceTerminated()) {
//      if (valueSetCache.test(valueSet.getKey()))
//        valueSetCache.popFinal(valueSet.getKey());
//      else
//        log.err("ValueSet not found in cache: " + valueSet.getKey());
//
//      if (valueSetCache.test(valueSet.getKey()))
//        log.err("OPPS!  ValueSet not found in cache: " + valueSet.getKey());
//      else
//        log.err("YEA!  ValueSet not found in cache: " + valueSet.getKey());
//    }
//
//    return valueSet.getKey();
//  }

  public int getModelCount() {
    return modelCount;
  }

  /**
   * The Class TestModel.
   */
  public class TestModel {

    /** The experiment. */
    private int experiment;

    /**
     * Instantiates a new test model.
     */
    public TestModel() {
    }

    /**
     * Initialize.
     */
    public void initialize() {
      experiment = 0;
    }

    /**
     * Gets the experiment.
     *
     * @return the experiment
     */
    public int getExperiment() {
      return experiment;
    }

    /**
     * Increment experiment.
     */
    public void incrementExperiment() {
      experiment++;
    }
  }
}
