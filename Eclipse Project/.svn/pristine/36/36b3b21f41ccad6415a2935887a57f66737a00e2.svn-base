/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-08-31
 */
package EngineMod;

import GenCol.entity;
import model.modeling.message;

/**
 * The Class EngineStage3.
 */
public class EngineStage3 extends EngineBase {

  /**
   * Instantiates a new engine stage 3.
   */
  public EngineStage3() {
    this("Stage3");
  }

  /**
   * Instantiates a new engine stage 3.
   *
   * @param name the name
   */
  public EngineStage3(final String name) {
    super(name);
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#initialize()
   */
  @Override
  public void initialize() {
    super.initialize();
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltext(double, model.modeling.message)
   */
//  @Override
//  public void deltext(final double e, final message x) {
//    Continue(e);
//
//    System.out.println("The elapsed time of the processor is" + e);
//    System.out.println("*****************************************");
//    System.out.println("external-Phase before: " + phase);
//
//    if (phaseIs("passive")) {
//      for (int i = 0; i < x.getLength(); i++)
//        if (messageOnPort(x, "in", i)) {
//          job = x.getValOnPort("in", i);
//          holdIn("busy", 10);
//          System.out.println("processing tiem of proc is" + 0);
//        }
//    }
//
//    System.out.println("external-Phase after: " + phase);
//  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltint()
   */
//  @Override
//  public void deltint() {
//    System.out.println("Internal-Phase before: " + phase);
//    passivate();
//    job = new entity("none");
//    System.out.println("Internal-Phase after: " + phase);
//  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltcon(double, model.modeling.message)
   */
//  @Override
//  public void deltcon(double e, message x) {
//    System.out.println("confluent");
//    deltint();
//    deltext(0, x);
//  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#out()
   */
//  public message out() {
//    message m = new message();
//
//    if (phaseIs("busy")) {
//      m.add(makeContent("out", job));
//    }
//
//    return m;
//  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#showState()
   */
//  @Override
//  public void showState() {
//    super.showState();
//
//    // System.out.println("job: " + job.getName());
//  }
}
