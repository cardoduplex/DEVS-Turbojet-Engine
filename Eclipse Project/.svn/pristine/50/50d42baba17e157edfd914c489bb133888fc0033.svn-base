/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-08-31
 */
package experiment.model;

import GenCol.entity;
import experiment.design.BackPorch;
import experiment.toolkit.ValueSet;
import model.modeling.message;

/**
 * The Class ExperimentBackPorch.
 */
public class ExperimentEngineBackPorch extends ExperimentEngineBase {

  /** The back porch. */
  private BackPorch backPorch;

  /**
   * Instantiates a new experiment back porch.
   */
  public ExperimentEngineBackPorch() {
    this("ExperimentBackPorch");
  }

  /**
   * Instantiates a new experiment back porch.
   *
   * @param name the name
   */
  public ExperimentEngineBackPorch(final String name) {
    super(name);
    backPorch = new BackPorch(this.getName());

    addInport("xIn");
    addOutport("trigger");
  }

  /* (non-Javadoc)
   * @see ExperimentMod.ExperimentBase#initialize()
   */
  @Override
  public void initialize() {
    super.initialize();
    backPorch.initialize();
    passivate();
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltext(double, model.modeling.message)
   */
  @Override
  public void deltext(final double e, final message x) {
    Continue(e);
    if (phaseIs("passive"))
      for (int i = 0; i < x.getLength(); i++)
        if (messageOnPort(x, "xIn", i)) {
          final entity job = x.getValOnPort("xIn", i);
          if (valueSetCache.test(job.getName())) {
            valueSetQueueIn.add(valueSetCache.peek(job.getName()));
            holdIn("process", 0);
          } else
            log.err("ValueSet not found in cache: " + job.getName());
        }
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltint()
   */
  @Override
  public void deltint() {
    if (valueSetQueueIn.size() > 0) {
      while (valueSetQueueIn.size() > 0) {
        final ValueSet valueSet = valueSetQueueIn.remove();
        backPorch.process(valueSet);
        valueSetQueueOut.add(valueSet);
        holdIn("trigger", 0);
      }
    } else
      passivate();
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#out()
   */
  @Override
  public message out() {
    final message m = new message();
    if (phaseIs("trigger"))
      while (valueSetQueueOut.size() > 0) {
        final ValueSet valueSet = valueSetQueueOut.remove();
        final String triggerMessage = (valueSet.isInstanceTerminated() ? "next" : "continue") + "~" + valueSet.getKey();
        m.add(makeContent("trigger", new entity(triggerMessage)));
      }
    return m;
  }
}
