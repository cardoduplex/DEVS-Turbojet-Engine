/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-10-09
 */
package experiment.design;

import java.util.LinkedList;
import java.util.Queue;

import experiment.toolkit.ExperimentLog;
import experiment.toolkit.Settings;
import experiment.toolkit.SettingsSingleton;
import experiment.toolkit.ValueSet;
import experiment.toolkit.ValueSetCache;
import experiment.toolkit.ValueSetCacheSingleton;

/**
 * The Class FrontPorch.
 */
public class FrontPorch {

  /** The settings. */
  protected final Settings settings = SettingsSingleton.getInstance();

  /** The value set cache. */
  protected final ValueSetCache valueSetCache = ValueSetCacheSingleton.getInstance();

  /** The log. */
  protected ExperimentLog log;

  /** The model count. */
  private final int modelCount;

  /** The test model list. */
  public TestModel[] testModelList;

  /** The total experiments. */
  private int totalExperiments;

  /**
   * Instantiates a new front porch.
   *
   * @param name the name
   */
  public FrontPorch(final String name) {
    log = new ExperimentLog(name);
    modelCount = settings.lookupInt("ExperimentEngine_ModelCount");

    testModelList = new TestModel[modelCount];
    for (int i = 0; i < testModelList.length; i++)
      testModelList[i] = new TestModel();
  }

  /**
   * Initialize.
   */
  public void initialize() {
    for (int i = 0; i < testModelList.length; i++)
      testModelList[i].initialize();

    loadExperiments();
  }

  /**
   * Load experiments.
   */
  private void loadExperiments() {
    System.out.println("Load experiment"); /*TODO*/
    totalExperiments = 4;/*TODO*/
  }

  /**
   * Start.
   *
   * @param valueSetQueueOut the value set queue out
   */
  public void start(final Queue<ValueSet> valueSetQueueOut) {
    for (int i = 0; i < testModelList.length; i++)
      if (testModelList[i].getExperiment() == 0) {
        testModelList[i].incrementExperiment();
        char version = (char) ('A' + i);
        final ValueSet valueSet = valueSetCache.create(testModelList[i].getExperiment(), version);
        valueSetQueueOut.add(valueSet);
      }
  }

  /**
   * Process.
   *
   * @param valueSetQueueIn the value set queue in
   */
  public void process(final Queue<ValueSet> valueSetQueueIn) {
    if (valueSetQueueIn.size() > 0) {
      // Separate terminated from continuing experiments
      final Queue<ValueSet> valueSetTerminatedQueue = new LinkedList<ValueSet>();
      for (final ValueSet valueSet : valueSetQueueIn)
        if (valueSet.isInstanceTerminated())
          valueSetTerminatedQueue.add(valueSet);
      for (final ValueSet valueSetTerminated : valueSetTerminatedQueue) {
        valueSetQueueIn.remove(valueSetTerminated);

        log.out("Experiment completed: " + valueSetTerminated.getKey());

        // Start next experiment
        testModelList[valueSetTerminated.getVersionIndex()].incrementExperiment();
        if (testModelList[valueSetTerminated.getVersionIndex()].getExperiment() < totalExperiments) {
          char version = (char) ('A' + valueSetTerminated.getVersionIndex());
          final ValueSet valueSet = valueSetCache.create(testModelList[valueSetTerminated.getVersionIndex()].getExperiment(), version);
          valueSetQueueIn.add(valueSet);
        }
      }
    }
  }

  /**
   * Are experiments complete.
   *
   * @return true, if successful
   */
  public boolean areExperimentsComplete() {
    int minExperiment = totalExperiments;
    for (int i = 0; i < testModelList.length; i++)
      if (testModelList[i].getExperiment() < minExperiment)
        minExperiment = testModelList[i].getExperiment();
    return minExperiment >= totalExperiments;
  }

  /**
   * Gets the model count.
   *
   * @return the model count
   */
  public int getModelCount() {
    return modelCount;
  }

  /**
   * The Class TestModel.
   */
  public class TestModel {

    /** The completed. */
    private boolean completed;

    /** The experiment. */
    private int experiment;

    /**
     * Instantiates a new test model.
     */
    public TestModel() {
    }

    /**
     * Initialize.
     */
    public void initialize() {
      completed = false;
      experiment = 0;
    }

    /**
     * Checks if is completed.
     *
     * @return true, if is completed
     */
    public boolean isCompleted() {
      return completed;
    }

    /**
     * Sets the completed.
     */
    public void setCompleted() {
      this.completed = true;
    }

    /**
     * Gets the experiment.
     *
     * @return the experiment
     */
    public int getExperiment() {
      return experiment;
    }

    /**
     * Increment experiment.
     */
    public void incrementExperiment() {
      experiment++;
    }
  }
}
