/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-09-24
 */
package experiment.toolkit;

import java.util.HashMap;

import org.apache.commons.io.FilenameUtils;

/**
 * The Class ValueSetCache.
 */
public class ValueSetCache {

  /** The value set map. */
  private HashMap<String, ValueSet> valueSetMap = new HashMap<String, ValueSet>();

  /**
   * Instantiates a new value set cache.
   */
  public ValueSetCache() {
  }

  /**
   * Test.
   *
   * @param key the key
   * @return true, if successful
   */
  public boolean test(final String key) {
    return valueSetMap.containsKey(key);
  }

  /**
   * Peek.
   *
   * @param key the key
   * @return the value set
   */
  public ValueSet peek(final String key) {
    return valueSetMap.get(key);
  }

  /**
   * Creates the.
   *
   * @param experiment the experiment
   * @param version the version
   * @return the value set
   */
  public ValueSet create(final int experiment, final char version) {
    final ValueSet valueSet = new ValueSet(experiment, version);
    final ValueSetLoad valueSetLoad = new ValueSetLoad();
    final String valueSetFilename = FilenameUtils.getBaseName(valueSetLoad.getFilename()) + version + '.' + FilenameUtils.getExtension(valueSetLoad.getFilename());
    valueSetLoad.load(valueSet, valueSetFilename);
    return valueSet;
  }

  /**
   * Put and increment pass.
   *
   * @param valueSet the value set
   */
  public void putAndIncrementPass(final ValueSet valueSet) {
    valueSet.incrementPass();
    valueSetMap.put(valueSet.getKey(), valueSet);
  }

  /**
   * Put and increment updates.
   *
   * @param valueSet the value set
   */
  public void putAndIncrementUpdates(final ValueSet valueSet) {
    valueSet.incrementUpdates();
    valueSetMap.put(valueSet.getKey(), valueSet);
  }

  /**
   * Put.
   *
   * @param valueSet the value set
   * @param consumers the consumers
   */
  public void put(final ValueSet valueSet, final int consumers) {
    valueSet.setConsumers(consumers);
    valueSetMap.put(valueSet.getKey(), valueSet);
  }

  /**
   * Pop.
   *
   * @param key the key
   * @return the value set
   */
  public ValueSet pop(final String key) {
    final ValueSet valueSet = valueSetMap.get(key);
    if (valueSet.decrementAndTestConsumers()) {
      valueSetMap.remove(valueSet.getKey());
    }
    return valueSet;
  }
}
