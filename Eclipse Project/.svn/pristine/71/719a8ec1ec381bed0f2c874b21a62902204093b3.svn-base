/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-09-24
 */
package experiment.toolkit;

import java.util.HashMap;

/**
 * The Class ValueSetCache.
 */
public class ValueSetCache {

  /** The value set map. */
  private HashMap<String, ValueSet> valueSetMap = new HashMap<String, ValueSet>();

  /**
   * Instantiates a new value set cache.
   */
  public ValueSetCache() {
  }

  /**
   * Creates the.
   *
   * @param experiment the experiment
   * @param version the version
   * @return the value set
   */
  public ValueSet create(final int experiment, final char version) {
    final ValueSet valueSet = new ValueSet(experiment, version);
    final ValueSetLoad valueSetLoad = new ValueSetLoad();
    valueSetLoad.load(valueSet);
    valueSetMap.put(valueSet.getKey(), valueSet);
    return valueSet;
  }

  /**
   * Push.
   *
   * @param valueSet the value set
   */
  public void push(ValueSet valueSet) {
    valueSet.incrementMutation();
    valueSetMap.put(valueSet.getKey(), valueSet);
  }

  /**
   * Test.
   *
   * @param key the key
   * @return true, if successful
   */
  public boolean test(String key) {
    return valueSetMap.containsKey(key);
  }

  /**
   * Pop.
   *
   * @param key the key
   * @return the value set
   */
  public ValueSet pop(String key) {
    final ValueSet valueSet = valueSetMap.get(key);
    valueSetMap.remove(valueSet.getKey());
    return valueSet;
  }

  /**
   * Pop final.
   *
   * @param key the key
   * @return the value set
   */
  public ValueSet popFinal(String key) {
    final ValueSet valueSet = valueSetMap.get(key);
    valueSet.decrementConsumers();
    if (valueSet.getConsumers() == 0)
      valueSetMap.remove(valueSet.getKey());
    return valueSet;
  }

  /**
   * Peek.
   *
   * @param key the key
   * @return the value set
   */
  public ValueSet peek(String key) {
    return valueSetMap.get(key);
  }

  public String getState(final String prefix, final ValueSet valueSet) {
    String state = "";
    if (valueSet != null)
      state += prefix + "ValueSet-key=" + valueSet.getKey();
    return state;
  }

  /**
   * Gets the tooltip text.
   *
   * @param valueSet the value set
   * @return the tooltip text
   */
  public String getTooltipText(final ValueSet valueSet) {
    String tooltip = "";
    if (valueSet != null)
      tooltip += "\n" + "ValueSet=" + valueSet.getKey() +
                 "\n" + "experiment=" + valueSet.getExperiment() +
                 "\n" + "version=" + valueSet.getVersion() +
                 "\n" + "instance=" + valueSet.getInstance() +
                 "\n" + "mutation=" + valueSet.getMutation();
    return tooltip;
  }
}
