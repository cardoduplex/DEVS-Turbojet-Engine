/*
 * CSE 593 - Fall 2016 - Applied Project
 * Author  : Lucio Ortiz and Robert Blazewicz
 * Version : DEVSJAVA 3.0
 * Date    : 2016-08-31
 */
package ExperimentMod;

import GenCol.entity;
import model.modeling.message;
import experiment.toolkit.ValueSet;

/**
 * The Class ExperimentFrontPorch.
 */
public class ExperimentFrontPorch extends ExperimentBase {

  /** The test model list. */
  private TestModel[] testModelList;

  /** The total experiments. */
  private int totalExperiments;

  /**
   * Instantiates a new experiment front porch.
   */
  public ExperimentFrontPorch() {
    this("ExperimentFrontPorch", 0);
  }

  /**
   * Instantiates a new experiment front porch.
   *
   * @param name the name
   * @param totalModels the total models
   */
  public ExperimentFrontPorch(final String name, final int totalModels) {
    super(name);

    testModelList = new TestModel[totalModels];
    for (int i = 0; i < testModelList.length; i++)
      testModelList[i] = new TestModel();

    addInport("trigger");
    addOutport("xOut");

    addTestInput("trigger", new entity("next"));
  }

  /* (non-Javadoc)
   * @see ExperimentMod.ExperimentBase#initialize()
   */
  @Override
  public void initialize() {
    super.initialize();
    for (int i = 0; i < testModelList.length; i++)
      testModelList[i].initialize();

    System.out.println("Load experiment"); /*TODO*/
    totalExperiments = 4;/*TODO*/

    holdIn("next", 0);
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltext(double, model.modeling.message)
   */
  @Override
  public void deltext(final double e, final message x) {
    Continue(e);
    if (phaseIs("running"))
      for (int i = 0; i < x.getLength(); i++)
        if (messageOnPort(x, "trigger", i)) {
          final entity job = x.getValOnPort("trigger", i);
          final String[] trigger = job.getName().split(":");
          switch (trigger[0]) {
          case "next":
//            if (trigger.length > 1)
//              clock = Double.parseDouble(trigger[1]);
            holdIn(trigger[0], 0);
            break;
          default:
            log.err("Unsupported trigger: " + job.getName());
            break;
          }
        }
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#deltint()
   */
  @Override
  public void deltint() {
    if (phaseIs("next")) {
      for (int i = 0; i < testModelList.length; i++) {
        testModelList[i].incrementExperiment();
        System.out.println("Processing int: " + testModelList[i].getExperiment() + ", clock=" + testModelList[i].getClock() + ", phase=" + phase);
        char version = (char) ('A' + i);
        testModelList[i].currentValueSet = valueSetCache.create(testModelList[i].getExperiment(), version, testModelList[i].getClock());
      }
      holdIn("active", 0);
    } else {
      int minExperiment = totalExperiments;
      for (int i = 0; i < testModelList.length; i++)
        if (testModelList[i].getExperiment() < minExperiment)
          minExperiment = testModelList[i].getExperiment();
      if (minExperiment >= totalExperiments)
        passivate();
      else
        holdIn("running", INFINITY);
    }

    showState();
  }

  /* (non-Javadoc)
   * @see model.modeling.atomic#out()
   */
  @Override
  public message out() {
    message m = new message();
    if (phaseIs("active"))
      for (int i = 0; i < testModelList.length; i++)
        if (testModelList[i].currentValueSet != null) {
          final String key = testModelList[i].currentValueSet.getKey();
          testModelList[i].currentValueSet = null;
          m.add(makeContent("xOut", new entity(key)));
        }
    return m;
  }

  /**
   * The Class TestModel.
   */
  private class TestModel {

    /** The experiment. */
    private int experiment;

    /** The clock. */
    private double clock;

    /** The current value set. */
    protected ValueSet currentValueSet;

    /**
     * Instantiates a new test model.
     */
    public TestModel() {
    }

    /**
     * Initialize.
     */
    public void initialize() {
      experiment = 0;
      clock = 0;
      currentValueSet = null;
    }

    /**
     * Gets the experiment.
     *
     * @return the experiment
     */
    public int getExperiment() {
      return experiment;
    }

    /**
     * Increment experiment.
     */
    public void incrementExperiment() {
      experiment++;
    }

    /**
     * Gets the clock.
     *
     * @return the clock
     */
    public double getClock() {
      return clock;
    }

    /**
     * Sets the clock.
     *
     * @param clock the new clock
     */
    public void setClock(final double clock) {
      this.clock = clock;
    }
  }
}
